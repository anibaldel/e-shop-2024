datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum Role {
    USER
    ADMIN
}

type CartProductType {
    id  String
    name  String
    description  String
    category  String
    brand  String
    selectedImage  Image
    quantity  Int
    price  Float
}

type Image {
  color String
  colorCode String
  image String
}

type Address {
  city String
  country String
  address String
  address2 String
  phone String
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  role          Role @default(USER)
  
  accounts      Account[]
  orders         Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews       Review[]
}

 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Order {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userId          String  @db.ObjectId
  amount          Float
  currency        String
  status          String
  deliveryStatus  String?
  createDate      DateTime @default(now())
  products        CartProductType[]
  address         Address?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  brand       String
  category    String
  inStock     Boolean
  images       Image[]
  reviews     Review[]

}

model Review {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  productId   String @db.ObjectId
  rating      Int
  comment      String
  createDate  DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 

 
